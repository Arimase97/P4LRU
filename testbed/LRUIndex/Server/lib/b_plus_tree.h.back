#ifndef YCSB_C_B_PLUS_TREE_H_
#define YCSB_C_B_PLUS_TREE_H_

#include <algorithm>
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <mutex>

using namespace std;

typedef string KEY_TYPE;
typedef vector<pair<string, string>> VAL_TYPE;
static int node_cnt;

class Node
{
public:
  bool isLeaf;
  Node *parent;
  vector<KEY_TYPE> key;
  vector<VAL_TYPE> val; // only leaf records val
  vector<Node *> child;
  int node_id;

  Node(Node *in_parent = NULL, bool in_isLeaf = true)
      : parent(in_parent), isLeaf(in_isLeaf)
  {
    node_id = ++node_cnt;
  }
};

template<uint32_t M>
class BPlusTree
{
public:
  void insert(KEY_TYPE in_key, VAL_TYPE in_val)
  {
    lock_guard<mutex> lock(mutex_);
    Node *cur = root;
    while (cur && !cur->isLeaf)
    {
      auto it = upper_bound(cur->key.begin(), cur->key.end(), in_key);
      cur = cur->child[it - cur->key.begin()];
    }

    auto p = lower_bound(cur->key.begin(), cur->key.end(), in_key) -
             cur->key.begin();
    cur->key.insert(cur->key.begin() + p, in_key);
    cur->val.insert(cur->val.begin() + p, in_val);

    overflow(cur);
  }

  VAL_TYPE lookup(KEY_TYPE in_key, Node* cur = NULL)
  {
    if (cur == NULL)
      cur = root;
    while (cur && !cur->isLeaf)
    {
      auto it = upper_bound(cur->key.begin(), cur->key.end(), in_key);
      cur = cur->child[it - cur->key.begin()];
    }

    auto it = lower_bound(cur->key.begin(), cur->key.end(), in_key);
    if (it == cur->key.end())
      return VAL_TYPE();
    return cur->val[it - cur->key.begin()];
  }

  uint64_t remove_key_index_prefix(string key) // key_index : usertable + user + uint64 -> uint64
  {
    key = key.substr(13);
    stringstream ss(key);
    uint64_t ret;
    ss >> ret;
    return ret;
  }

  void print_node(Node *cur, ofstream &fout)
  {
    if (cur == root)
      fout << "Node: 0x0" << endl;
    else
      fout << "Node: " << cur << endl;
    fout << "keys: <0,0> ";
    for (auto k : cur->key)
    {
      uint64_t fbt_key = remove_key_index_prefix(k);
      uint32_t key_hi = fbt_key >> 32 & 0xffffffff;
      uint32_t key_lo = fbt_key & 0xffffffff;
      fout << "<" << key_hi << "," << key_lo << "> ";
    }
    fout << endl;
    fout << "child: ";
    for (auto c : cur->child)
      fout << c << " ";
      // fout << c << " (" << c->node_id << ") ";
    fout << endl;
  }

  void load2switch(string filename)
  {
    ofstream fout(filename);
    print_node(root, fout);
    for (auto ch : root->child){
      print_node(ch, fout);
    }
    fout.close();
  }

protected:
  Node *root = new Node(NULL, true);
  mutex mutex_;

  void overflow(Node *cur)
  {
    if (cur->key.size() > M)
    {
      Node *new_node = new Node(cur->parent, cur->isLeaf);

      if (!cur->parent)
      {
        root = cur->parent = new_node->parent = new Node(NULL, false);
        cur->parent->child.push_back(cur);
      }

      if (cur->isLeaf)
      {
        new_node->key.insert(new_node->key.begin(), cur->key.begin() + M / 2,
                             cur->key.end());
        cur->key.erase(cur->key.begin() + M / 2, cur->key.end());
        new_node->val.insert(new_node->val.begin(), cur->val.begin() + M / 2,
                             cur->val.end());
        cur->val.erase(cur->val.begin() + M / 2, cur->val.end());

        auto p = lower_bound(cur->parent->key.begin(), cur->parent->key.end(),
                             new_node->key[0]) -
                 cur->parent->key.begin();
        cur->parent->key.insert(cur->parent->key.begin() + p, new_node->key[0]);
        cur->parent->child.insert(cur->parent->child.begin() + p + 1, new_node);
      }
      else
      {
        new_node->key.insert(new_node->key.begin(),
                             cur->key.begin() + M / 2 + 1, cur->key.end());
        auto new_key = cur->key[M / 2];
        cur->key.erase(cur->key.begin() + M / 2, cur->key.end());
        new_node->child.insert(new_node->child.begin(),
                               cur->child.begin() + M / 2 + 1,
                               cur->child.end());
        cur->child.erase(cur->child.begin() + M / 2 + 1, cur->child.end());
        for (auto ch : new_node->child)
          ch->parent = new_node;

        auto p = lower_bound(cur->parent->key.begin(), cur->parent->key.end(),
                             new_key) -
                 cur->parent->key.begin();
        cur->parent->key.insert(cur->parent->key.begin() + p, new_key);
        cur->parent->child.insert(cur->parent->child.begin() + p + 1, new_node);
      }

      overflow(cur->parent);
    }
  }
};

#endif // YCSB_C_B_PLUS_TREE_DB_H_
